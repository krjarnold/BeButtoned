{"version":3,"sources":["webpack:///webpack/bootstrap 820956a040d03c6cc4b1","webpack:///./lib/be_buttoned.js","webpack:///./lib/game.js","webpack:///./lib/view.js","webpack:///./lib/button_constants.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;;;;;;ACRD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,SAAS;AAC9B,2BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,eAAc,qDAAqD;AACnE;;AAEA;AACA;AACA;AACA,SAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,wBAAwB,EAAE;AAChE;AACA,QAAO;AACP,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA0C,mBAAmB,EAAE;AAC/D,8CAA6C,mBAAmB,EAAE;AAClE;AACA,QAAO;AACP,2CAA0C,mBAAmB,EAAE;AAC/D,QAAO;AACP,8CAA6C,mBAAmB,EAAE;AAClE,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;;;;;ACvUA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;;AAEA;;AAEA;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 820956a040d03c6cc4b1\n **/","const Game = require('./game');\nconst View = require('./view');\n\n$( () => {\n  const rootEl = $(\".view\");\n  const game = new Game();\n  new View(game, rootEl);\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/be_buttoned.js\n ** module id = 0\n ** module chunks = 0\n **/","const View = require('./view');\nclass Game {\n\n  createBoard() {\n    this.columns = [[], [], [], [], [], [], [], []];\n    this.grid = [[], [], [], [], [], [], [], []];\n    this.$board = $(\"<ul>\").addClass(\"board\");\n    this.validMove = false;\n    this.score = 0;\n\n    let counter = 0;\n    for (let row = 0; row < 8; row++) {\n      for (let column = 0; column < 8; column++) {\n        counter += 1;\n        let $tile = $('<li class=\"tile\" >'+this.randomButton()+'</li>');\n        $tile.data(\"pos\", [row, column]);\n        this.$board.append($tile);\n      }\n    }\n    this.formatColumns();\n    this.formatGrid();\n    this.handleClusters();\n    return this.$board;\n  }\n\n  handleClusters() {\n    if (this.findClusters()) {\n      this.removeClusters();\n    } else if (this.validMove) {\n      console.log(\"Make a move!\");\n    } else if (!this.validMove) {\n      if (this.validMoves()) {\n        console.log(\"Make a new move!\");\n      } else {\n        console.log(\"Sorry, no moves\");\n      }\n    }\n  }\n\n  randomButton() {\n    return `${ButtonConstants[Math.floor((Math.random() * 7) + 1)]}`;\n  }\n\n  formatColumns () {\n    this.$board.children().each ( (i, btn) => {\n         this.columns[i % 8].push(btn);\n       });\n    // console.log(JSON.stringify(this.columns));\n  }\n\n  formatGrid () {\n    this.columns.forEach ( (el, i) => {\n      el.forEach ( (el2, j) => {\n        this.grid[j].push(el2);\n      });\n    });\n  }\n\n  findClusters () {\n    this.clusters = [];\n    this.grid.forEach ( (row, i) => {\n      row.forEach ( (btn, j) => {\n        let checked = false;\n        for( let k = 0; k < this.clusters.length; k++ ) {\n          if( this.clusters[k][0] === i && this.clusters[k][1] === j ) {\n            checked = true;\n            break;\n          }\n        }\n        if (checked) {\n          return;\n        }\n        let btnVal = $(btn.children[0]).attr(\"value\");\n        let result = this.check(btnVal, i, j);\n        if (result.length > 0) {\n          result.forEach( (el, i) => { this.clusters.push(el); });\n        }\n      });\n    });\n    return (this.clusters.length > 0) ? true : false;\n  }\n\n  removeClusters() {\n    // remove each button from \"columns\" so that the buttons shift down, and you can see how many you need to add\n    this.clusters.forEach( (pos, index) => {\n      // the \"y\" axis for the grid- \"x\" axis for the column orientation\n      let i = pos[1];\n      // the \"x\" axis for the grid- \"y\" axis for the column orientation\n      let j = pos[0];\n      // add animations for buttons that have been shifted by a deletion\n      this.columns[i][j] = \"empty\";\n      for (let k = j - 1; k >= 0; k--) {\n        if (this.columns[i][k] !== \"empty\") {\n          this.addAnimation(this.columns[i][k].children, \"animated fadeInDown\");\n        }\n      }\n    });\n\n  let result = [];\n      this.columns.forEach( (el, i) => {\n          result.push(el.filter( (el2, k) => {\n            return el2 !== \"empty\";\n          }));\n        });\n\n    this.columns = result;\n    console.log(\"columns_with_deletions\");\n    console.log(this.columns);\n    this.addButtons();\n  }\n\n  addButtons() {\n    this.columns.forEach ( (column, index) => {\n      // add buttons until column size reaches 8\n      if (column.length !== 8) {\n        for (let i = column.length; i < 8; i++) {\n          let $tile= ($('<li class=\"tile\">'+this.randomButton()+'</li>')).data(\"pos\", [7 - i, index]);\n          this.addAnimation($tile.children(), \"animated fadeInDown\");\n          this.columns[index].unshift($tile[0]);\n        }\n      }\n    });\n    console.log(\"columns_with_additions\");\n    console.log(this.columns);\n    this.grid = [[], [], [], [], [], [], [], []];\n    this.$board = $(\"<ul>\").addClass(\"board\");\n    this.formatGrid();\n    this.grid.forEach( (row, i) => {\n      row.forEach( (column, j) => {\n        let $tile = $(column).data(\"pos\", [i, j]);\n        this.$board.append($tile);\n      });\n    });\n    console.log(\"final_grid\");\n    console.log(this.grid);\n    console.log(\"final_board\");\n    console.log(this.$board);\n    this.handleClusters();\n  }\n\n  addAnimation(element, animationName) {\n    const animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';\n    // Animation end is fromt the animation docs\n    $(element).addClass(animationName).one(animationEnd, function() {\n      $(this).removeClass(animationName);\n    });\n  }\n\n\n  check(btnVal, k, l) {\n    this.bonus = false;\n    let clusters = [];\n    // Check rows\n    let i = k;\n    let j = l;\n    let adjacentRow = [[k, l]];\n      j += 1;\n        while (j < 8 && btnVal === $(this.grid[i][j].children).attr(\"value\")) {\n          adjacentRow.push([i, j]);\n          j++;\n        }\n\n    // Check columns\n    let adjacentColumn = [[k, l]];\n    i += 1;\n    j = l;\n      while (i < 8 && btnVal === $(this.grid[i][j].children).attr(\"value\")) {\n        adjacentColumn.push([i, j]);\n        i++;\n      }\n\n      if (adjacentRow.length >= 3 && adjacentColumn.length >= 3) {\n        adjacentRow.forEach ( (el, i) => { clusters.push(el); } );\n        adjacentColumn.forEach ( (el, i) => { clusters.push(el); } );\n        this.bonus = true;\n      } else if (adjacentRow.length >= 3) {\n        adjacentRow.forEach ( (el, i) => { clusters.push(el); } );\n      } else if (adjacentColumn.length >= 3) {\n        adjacentColumn.forEach ( (el, i) => { clusters.push(el); } );\n      } else if (adjacentRow.length === 2) {\n        this.checkValidMove(adjacentRow, btnVal, \"row\");\n      } else if (adjacentColumn.length === 2) {\n        this.checkValidMove(adjacentColumn, btnVal, \"column\");\n      }\n      this.score += (clusters.length * 100);\n      if (this.bonus) {\n        this.score += 500;\n      }\n    return clusters;\n    }\n\n\n\n\n\n  checkValidMove(adjacent, btnVal, type) {\n    if (this.validMove) {\n      return;\n    }\n\n    let btnPos = adjacent[0];\n    let i = btnPos[0];\n    let j = btnPos[1];\n\n    // This checks the delta positions of all possible valid moves in a \"horizontal\" context for the pair\n    if (type === \"row\") {\n      if (i + 1 < 8 && j - 1 >= 0 && $(this.grid[i + 1][j - 1].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i - 1 >= 0 && j - 1 >= 0 && $(this.grid[i - 1][j - 1].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i + 1 < 8 && j + 2 < 8 && $(this.grid[i + 1][j + 2].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i - 1 >= 0 && j + 2 < 8 && $(this.grid[i - 1][j + 2].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (j + 3 < 8 && $(this.grid[i][j + 3].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (j - 2 >= 0 && $(this.grid[i][j - 2].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      }\n    }\n\n    // This checks the delta positions of all possible valid moves in a \"vertical\" context for the pair\n    if (type === \"column\") {\n      if (i - 1 >= 0 && j - 1 >= 0 && $(this.grid[i - 1][j - 1].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i - 1 >= 0 && j + 1 < 8 && $(this.grid[i - 1][j + 1].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i + 2 < 8 && j + 1 < 8 && $(this.grid[i + 2][j + 1].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i + 2 < 8 && j - 1 >= 0 && $(this.grid[i + 2][j - 1].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i - 2 >= 0 && $(this.grid[i - 2][j].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      } else if (i + 3 < 8 && $(this.grid[i + 3][j].children).attr(\"value\") === btnVal) {\n        this.validMove = true;\n      }\n    }\n  return this.validMove;\n  }\n\n  validMoves() {\n    return false;\n  }\n\n  checkIfCluster(btnVal, k, l) {\n    let cluster = false;\n    // top- Check for a match above the target button\n    if (!cluster && k !== 0) {\n      let index = (k === 1) ? 0 : k - 2;\n      let j = l;\n      let sameVal = [];\n      for (let i = index; i < index + 3; i++) {\n        if (btnVal === $(this.grid[i][j].children).attr(\"value\")) {\n          sameVal.push(true);\n        }\n      }\n      if (sameVal.length === 3) {\n        cluster = true;\n      }\n      // Checks if the one above and one below the target are the same\n      if (k !== 7) {\n        if ( (btnVal === $(this.grid[k + 1][l].children).attr(\"value\")) &&\n              (btnVal === $(this.grid[k - 1][l].children).attr(\"value\"))\n            ){\n          cluster = true;\n        }\n      }\n    }\n\n      // left- Check for a match to the left of the target button\n      if (!cluster && l !== 0) {\n        let i = k;\n        let index = (l === 1) ? 0 : l - 2;\n        let sameVal = [];\n        for (let j = index; j < index + 3; j++) {\n          if (btnVal === $(this.grid[i][j].children).attr(\"value\")) {\n            sameVal.push(true);\n          }\n        }\n        if (sameVal.length === 3) {\n          cluster = true;\n        }\n        // Checks if the one to the left and one to the right of the target are the same\n        if (l !== 7) {\n          if ( (btnVal === $(this.grid[k][l + 1].children).attr(\"value\")) &&\n                (btnVal === $(this.grid[k][l - 1].children).attr(\"value\"))\n              ){\n            cluster = true;\n          }\n        }\n      }\n\n      // bottom- Check for a match to the bottom of the target button\n      if (!cluster) {\n        let index = k;\n        let j = l;\n        let sameVal = [];\n        for (let i = index; i < index + 3 && i < 8; i++) {\n          if (btnVal === $(this.grid[i][j].children).attr(\"value\")) {\n            sameVal.push(true);\n          }\n        }\n        if (sameVal.length === 3) {\n          cluster = true;\n        }\n      }\n\n      // right- Check for a match to the right of the target button\n      if (!cluster) {\n        let i = k;\n        let index = l;\n        let sameVal = [];\n        for (let j = index; j < index + 3 && j < 8; j++) {\n          if (btnVal === $(this.grid[i][j].children).attr(\"value\")) {\n            sameVal.push(true);\n          }\n        }\n        if (sameVal.length === 3) {\n          cluster = true;\n        }\n      }\n    return cluster;\n  }\n\n\n}\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","const ButtonConstants = require('./button_constants');\nconst Game = require('./game');\n\nclass View {\n  constructor(game, $el) {\n    this.game = game;\n    this.$el = $el;\n    this.swap = [];\n\n    // this.board = this.game.createBoard();\n    // this.$el.append(\"<h1>Be-Buttoned</h1>\");\n    // $(\"h1\").addClass(\"animated rubberBand\");\n    // this.$el.append(\"<p class=welcome >Welcome to Be-Buttoned!  Your goal is to match as many buttons as you can!  But, you have to match as least three in a row.  Click on any button, then click on any button to the top, left, right, or bottom to swap.  You can only swap buttons if they make a match of at least three it a row!  Have fun! </p>\");\n    // this.$el.append(this.board);\n    // this.$el.append('<div class=\"score\">'+\"Score\"+\"  \"+this.game.score+'</div>');\n    this.render(\"start\");\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    this.$el.on(\"click\", \"li\", ( event => {\n      event.preventDefault();\n      const $button = $(event.currentTarget).addClass(\"animated pulse\");\n      this.handleClick($button);\n    }));\n  }\n\n  handleClick($button) {\n    if (this.swap.length < 1) {\n      this.swap.push($button);\n      console.log(\"Click a button to swap!\");\n    } else {\n      this.swap.push($button);\n      this.adjacent();\n    }\n  }\n\n  adjacent() {\n    console.log(this.swap);\n    let firstBtn = this.swap[0];\n    let secondBtn = this.swap[1];\n    let firstBtnPos = firstBtn.data(\"pos\");\n    let secondBtnPos = secondBtn.data(\"pos\");\n    if ( (firstBtnPos[0] + 1 === secondBtnPos[0]) && (firstBtnPos[1] === secondBtnPos[1]) ) {\n      this.validMove(firstBtn, secondBtn);\n    } else if ( (firstBtnPos[0] - 1 === secondBtnPos[0]) && (firstBtnPos[1] === secondBtnPos[1]) ) {\n      this.validMove(firstBtn, secondBtn);\n    } else if ( (firstBtnPos[0] === secondBtnPos[0]) && (firstBtnPos[1] + 1 === secondBtnPos[1]) ) {\n      this.validMove(firstBtn, secondBtn);\n    } else if ( (firstBtnPos[0] === secondBtnPos[0]) && (firstBtnPos[1] - 1 === secondBtnPos[1]) ) {\n      this.validMove(firstBtn, secondBtn);\n    } else {\n      console.log(\"Pick a button touching the first one!  No diagonals\");\n      this.swap.splice(1, 1);\n      console.log(this.swap);\n    }\n  }\n\n  validMove(firstBtn, secondBtn) {\n    let firstBtnPos = firstBtn.data(\"pos\");\n    let secondBtnPos = secondBtn.data(\"pos\");\n    let btnVal = firstBtn.children().attr(\"value\");\n    this.game.grid[secondBtnPos[0]][secondBtnPos[1]] = firstBtn[0];\n    let result = this.game.checkIfCluster( btnVal, secondBtnPos[0], secondBtnPos[1] );\n    if (result) {\n      // $(firstBtn).removeClass(\"animated pulse\");\n      $(secondBtn).removeClass(\"animated pulse\");\n      this.game.grid[firstBtnPos[0]][firstBtnPos[1]] = secondBtn[0];\n      this.game.columns[firstBtnPos[1]][firstBtnPos[0]] = secondBtn[0];\n      this.game.columns[secondBtnPos[1]][secondBtnPos[0]] = firstBtn[0];\n      this.game.handleClusters();\n\n\n      this.render(\"board\");\n    } else {\n      this.game.grid[secondBtnPos[0]][secondBtnPos[1]] = secondBtn[0];\n      console.log(\"Sorry, not a match- try again\");\n    }\n    this.swap = [];\n  }\n\n  render(type) {\n    let header_container = $(\"<div>\").addClass(\"header-container\");\n    let header = $(\"<h1>Be-Buttoned</h1>\");\n    this.$el.append(header_container);\n    header_container.append(header);\n    // let score = $(\"<div>\").addClass(\"score\");\n    // $(score).append(\"<p>Score</p>\");\n    // $(score).append('<p>'+this.game.score+'</p>');\n\n\n    if (type === \"board\") {\n      this.$el.empty();\n      this.$el.append(header_container);\n      this.$el.append(this.game.$board);\n      $(\"ul\").append('<div class=\"score\"><p>Score</p><p>this.game.score</p></div>');\n    }\n    // this.game_container = $(\"<div>\").addClass(\"game-container\");\n    // let score_container = $(\"<div>\").addClass(\"score-container\");\n    // let comments_container = $(\"<div>\").addClass(\"comments-container\");\n\n    this.$el.append(\"<img class=quilt src=./images/quilt_pattern.svg></img>\");\n    // this.$el.append(this.game_container);\n    // this.game_container.append(score_container);\n    // debugger\n    if (type === \"start\") {\n      this.board = this.game.createBoard();\n      this.game.score = 0;\n      this.score = $('<div class=\"score\">'+\"Score\"+\"  \"+this.game.score+'</div>');\n      // debugger\n      $(this.board.children().children()).removeClass(\"animated fadeInDown\");\n      // debugger\n      // header_container.append(header);\n      this.game.addAnimation(header, \"animated rubberBand\");\n      this.$el.append(this.board);\n      $(\"ul\").append(this.score);\n      // this.$el.append(score_container);\n      // $(this.score).hide();\n      setTimeout(this.welcome.bind(this), 1600);\n      // $(\"h1\").addClass(\"animated rubberBand\");\n\n    }\n\n  }\n\n  welcome() {\n    // debugger\n    // let buttons = this.board.children().children();\n    let welcome = $(\"<p class=welcome >Welcome to Be-Buttoned! Your goal is to match as many buttons as you can! But, you have to match as least three in a row. Click on any button, then click on any button to the top, left, right, or bottom to swap. You can only swap buttons if they make a match of at least three it a row!  Have fun! </p>\");\n    let start_button = $(\"<button><p class=start-text >Start</p></button>\").addClass(\"start-button\");\n    let welcome_container = $(\"<div>\").addClass(\"welcome-container\");\n    this.$el.append(welcome_container);\n    this.$el.append(welcome);\n    this.game.addAnimation(welcome, \"animated zoomInDown\");\n    this.$el.append(start_button);\n    this.game.addAnimation(start_button, \"animated rotateIn\");\n    this.$el.on(\"click\", \"button\", ( event => {\n      event.preventDefault();\n      const animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';\n      const button = $(event.currentTarget);\n      $(button).addClass(\"animated rotateOut\").one(animationEnd, function() {\n        $(this).removeClass(\"animated rotateOut\");\n        $(start_button).hide();\n      });\n\n      $(welcome).addClass(\"animated zoomOutUp\").one(animationEnd, function() {\n        $(this).removeClass(\"animated zoomOutUp\");\n        $(welcome).hide();\n        $(welcome_container).hide();\n      });\n    }));\n  }\n\n}\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/view.js\n ** module id = 2\n ** module chunks = 0\n **/","ButtonConstants = {\n  1: \"<img class=button value= 1 src='./images/orange_button.svg' >\",\n  2: \"<img class=button value= 2 src='./images/yellow_button.svg' >\",\n  3: \"<img class=button value= 3 src='./images/green_button.svg' >\",\n  4: \"<img class=button value= 4 src='./images/blue_button.svg' >\",\n  5: \"<img class=button value= 5 src='./images/teal_button.svg' >\",\n  6: \"<img class=button value= 6 src='./images/pink_button.svg' >\",\n  7: \"<img class=button value= 7 src='./images/purple_button.svg' >\",\n};\n\nmodule.exports = ButtonConstants;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/button_constants.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}